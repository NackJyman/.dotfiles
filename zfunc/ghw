#!/usr/bin/env python3
"""Get to GitHub really fast!

A simple command line interface to open GitHub repositories in a
web browser without ever leavin g the terminal.

Usage:
    ghw [<repo_name>] [<branch_name>]
    ghw (-b <branch_name>)
    ghw (-p <profile_name/repo_name>)
    ghw (-h | --help | --version)
"""

from docopt import docopt
import subprocess
from subprocess import PIPE
import sys

VERSION = "0.0.2"
GITHUB_USERNAME = "jarulsamy"

# Templates for URL completion
URL_TEMPLATE = "https://github.com/{username}/{repo_name}/tree/{branch_name}"
GH_PROFILE = "https://github.com/{username}"


def ssh_to_https(ssh_url):
    """Convert ssh remote to https

    Args:
        ssh_url: SSH URL to convert to HTTPS

    Returns:
        url: str to HTTPS url

    Raises:
        None
    """
    if "@" not in ssh_url:
        return ssh_url
    url = ssh_url.split("@")[1]
    url = url.replace(":", "/")
    url = f"https://{url}"
    return url


def get_current_branch():
    """Get the branch of the current git repo

    Uses a external call to a subprocess to grab the
    branch of the current git repository.

    Args:
        None

    Returns:
        branch: str name of branch
        None: failed to get a branch name

    Raises:
        None
    """
    branch_name = subprocess.run(["git", "branch", "--show-current"], capture_output=True)
    if branch_name.stderr:
        return None
    return branch_name.stdout.decode().strip()


def get_remote_url(name=None, branch_name=None):
    """Convert name of repo to URL

    Converts either, the name of the repo, or the remote URL to
    a GitHub HTTPS URL.

    Args:
        name: Optionally, get the URL of a GitHub repo from its name
        branch_name: Optionally, get the URL to the specific branch of a repo

    Returns:
        str: URL to repository

    Raises:
        None
    """
    # Get the right branch name, default to master.
    if not name:
        branch_name = branch_name or get_current_branch()
        # Try and grab current git repo.
        # If there isn't one, just open profile.
        url_name = subprocess.run(["git", "config", "--get", "remote.origin.url"], capture_output=True)
        if url_name.stdout.decode() == "":
            return GH_PROFILE.format(username=GITHUB_USERNAME)

        # Cleanup output.
        url = url_name.stdout.decode().strip()
        # Ensure URL is in proper HTTPS schema.
        url = ssh_to_https(url)
        url = f"{url}/tree/{branch_name}"

        return url

    # Complete template for URL.
    url = URL_TEMPLATE.format(username=GITHUB_USERNAME, repo_name=name, branch_name=branch_name)
    # Handle missing branch condition.
    if branch_name is None:
        url = url.replace("/tree/None", "")

    return url


def open_url(url):
    """Use xdg-open to open a URL.

    Args:
        url: str URL to open

    Returns:
        None

    Raises:
        None
    """
    subprocess.Popen(["xdg-open", f"{url}"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


def process_args(args):
    """Process CLI flags.

    Args:
        args: dict from docopt arg parser

    Returns:
        None

    Raises:
        None
    """
    # Open a profile optionally with a repo.
    if args.get("<profile_name/repo_name>"):
        open_url(GH_PROFILE.format(username=args.get("<profile_name/repo_name>")))
        return

    # Open current git repo with specified branch.
    if args.get("-b"):
        url = get_remote_url(branch_name=args.get("<branch_name>"))
    # Open specified repo with specified branch.
    name = args.get("<repo_name>")
    branch = args.get("<branch_name>")
    url = get_remote_url(name=name, branch_name=branch)
    open_url(url)


args = docopt(__doc__, version=VERSION)
process_args(args)
